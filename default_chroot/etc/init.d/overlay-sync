#!/bin/sh
# /etc/init.d/overlay-sync: Sync overlay additions to lower branch
### BEGIN INIT INFO
# Provides:          overlay-sync
# Required-Start:    $remote_fs
# Required-Stop:     umountnfs
# X-Stop-After:      sendsigs
# Default-Start:     
# Default-Stop:      0 6
# Short-Description: Sync overlay additions to lower branch
# Description:       Sync overlay filesystem additions from upper tmpfs (fast)
#                    branch to lower on-disk (slow) branch by running
#                    `/sbin/overlay-sync sync` script.
### END INIT INFO

# TODO: by manipulating LSB headers above, make this script run after /etc/init.d/sendsigs (when updated with update-rc.d); currently (bug?) it is always K01*

NAME=overlay-sync
DAEMON=/sbin/$NAME
DAEMON_ARGS="sync"

# define LSB log_* functions (lsb-base package)
. /lib/lsb/init-functions

# exit if rsync not installed
if [ ! -x "$(which rsync)" ]; then
  log_failure_msg 'Cannot synchronize filesystems: rsync is missing'
  exit 0;
fi

# load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh
# load LOCKFILE and other overlay-related variables
. /etc/overlay/vars.sh

do_stop ()
{
  # Return
  #   0 if daemon has been stopped, OK
  #   1 if daemon was already stopped
  #   2 if daemon could not be stopped
  #   other if a failure occurred

  # if user chose to not synchronize this time
  if [ -e /.nosync ]; then
    rm -f /.nosync
    log_warning_msg 'Not synchronizing overlay filesystems.'
    exit 0
  fi
  # if overlay is not even used
  if ! mount | grep -F "$RO_ROOT" >/dev/null ; then
    log_success_msg 'Overlay filesystem not mounted. Nothing to do.'
    exit 0
  fi
  
  log_daemon_msg 'Synchronizing filesystems ... '
  start-stop-daemon --start --pidfile "$LOCKFILE" --exec "$DAEMON" --name "$NAME" -- $DAEMON_ARGS
  log_end_msg $?
  RETVAL="$?"
  return "$RETVAL"
}

case "$1" in
  start)
    # no-op
    ;;
  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Synchronizing overlay filesystems"
    do_stop
    case "$?" in
      0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ; exit 0 ;;
      2)   [ "$VERBOSE" != no ] && log_end_msg 1 ; exit 2 ;;
    esac
    ;;
  status)
    #~ [ -e $LOCKFILE ] && exit 0 || exit 3
    status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
    ;;
  restart|reload|force-reload)
    echo "Error: argument '$1' not supported" >&2
    exit 3
    ;;
  *)
    echo "Usage: $SCRIPTNAME {stop|status}" >&2
    exit 3
    ;;
esac
